apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-parcelize'

android {
    namespace 'org.videolan.vlc'
    buildToolsVersion rootProject.ext.buildToolsVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11.toString()
    }

    buildFeatures {
        buildConfig = true
    }

    dataBinding {
        enabled = true
    }

    packagingOptions {
        jniLibs {
            pickFirsts += ['**/*.so']
        }
    }

    defaultConfig {
        compileSdkVersion rootProject.ext.compileSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        minSdkVersion rootProject.ext.minSdkVersion

        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner "org.videolan.vlc.MultidexTestRunner"
        // The following argument makes the Android Test Orchestrator run its
        // "pm clear" command after each test invocation. This command ensures
        // that the app's state is completely cleared between tests.
        testInstrumentationRunnerArguments clearPackageData: 'true'

        consumerProguardFiles 'consumer-rules.pro'
        multiDexEnabled true

        buildConfigField "String", "APP_ID", "\"${rootProject.ext.appId}\""
        buildConfigField 'String', 'LIBVLC_VERSION', "\"${rootProject.ext.libvlcVersion}\""
        buildConfigField 'String', 'ML_VERSION', "\"${rootProject.ext.mediaLibVersion}\""
        buildConfigField 'String', 'VLC_VERSION_NAME', "\"${rootProject.ext.versionName}\""
        buildConfigField 'String[]', 'TRANSLATION_ARRAY', generateTranslation()
        buildConfigField 'int', 'VLC_VERSION_CODE', "${rootProject.ext.versionCode}"
        resValue "string", "build_host", hostName()
        resValue "string", "build_revision", revision()
        resValue "string", "build_time", buildTime()
        resValue "string", "changelog", changelog()
        resValue 'string', 'tv_provider_authority', "${rootProject.ext.appId}.tv"
    }

    testOptions {
        animationsDisabled = true
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        unitTests {
            includeAndroidResources = true
        }
        unitTests.all {
            jvmArgs '-noverify'
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen { false }
                showStandardStreams = true
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles 'proguard-rules.pro'
            buildConfigField "boolean", "BETA", isBeta()
            resValue 'string', 'benchmark_package_name', 'org.videolan.vlcbenchmark'
        }
        signedRelease {
            initWith release
            matchingFallbacks = ['release']
        }
        debug {
            jniDebuggable true
            buildConfigField "String", "APP_ID", "\"${rootProject.ext.appId}.debug\""
            buildConfigField "boolean", "BETA", "false"
            buildConfigField "boolean", "NO_TV", "false"
            resValue 'string', 'benchmark_package_name', 'org.videolan.vlcbenchmark.debug'
            resValue 'string', 'tv_provider_authority', "${rootProject.ext.appId}.debug.tv"
        }
        dev {
            initWith debug
            matchingFallbacks = ['debug']
        }
        noTv {
            initWith release
            matchingFallbacks = ['release']
            buildConfigField "boolean", "NO_TV", "true"
        }
        vlcBundle {
            initWith release
            matchingFallbacks = ['release']
        }
    }

    sourceSets.main {
        manifest.srcFile 'AndroidManifest.xml'
        java.srcDirs = ['src']
        resources.srcDirs = ['src']
        aidl.srcDirs = ['src']
        renderscript.srcDirs = ['src']
        res.srcDirs = ['res']
        assets.srcDirs = ['assets']
    }
    sourceSets.debug {
        manifest.srcFile 'flavors/debug/AndroidManifest.xml'
        res.srcDirs = ['flavors/debug/res']
        assets.srcDirs = ['flavors/debug/assets']
    }
    sourceSets.dev {
        manifest.srcFile 'test/AndroidManifest.xml'
        res.srcDirs = ['flavors/debug/res']
        assets.srcDirs = ['flavors/debug/assets']
    }
    sourceSets.test {
        manifest.srcFile 'test/AndroidManifest.xml'
        java.srcDirs = ['test', 'test-common']
        assets.srcDirs = ['flavors/debug/assets']
    }
    sourceSets.androidTest {
        java.srcDirs = ['androidTest', 'test-common']
        assets.srcDirs = ['flavors/debug/assets']
        assets.srcDirs += files("$projectDir/assets/schemas".toString())
    }
}

def generateTranslation() {
    def foundLocales = new StringBuilder()
    foundLocales.append("new String[]{")

    fileTree("../resources/src/main/res").visit { /*FileVisitDetails*/ details ->
        println 'details: ' + details
        if (details.file.path.endsWith("strings.xml")) {
            def languageCode = details.file.parentFile.name.replaceAll('values-', '').replaceAll('-r', '-')
            languageCode = (languageCode == "values") ? "en" : languageCode
            foundLocales.append("\"").append(languageCode).append("\"").append(",")
        }
    }

    foundLocales.append("}")
    //Don't forget to remove the trailing comma
    def foundLocalesString = foundLocales.toString().replaceAll(',}', '}')
    return foundLocalesString
}

tasks.register('generateSources', Jar) {
    archiveClassifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

dependencies {
    api project(':application:live-plot-graph')
    api project(':application:mediadb')
    api project(':application:resources')
    api project(':application:tools')
    api project(':extension-api')
    api project(':libvlcjni:libvlc')
    api project(':medialibrary')
//    debugApi "org.videolan.android:libvlc-all:$rootProject.ext.libvlcVersion"
//    debugApi "org.videolan.android:medialibrary-all:$rootProject.ext.mediaLibVersion"
//    devApi project(':libvlcjni:libvlc')
//    devApi project(':medialibrary')
//    releaseApi "org.videolan.android:libvlc-all:$rootProject.ext.libvlcVersion"
//    releaseApi "org.videolan.android:medialibrary-all:$rootProject.ext.mediaLibVersion"
//    signedReleaseApi "org.videolan.android:libvlc-all:$rootProject.ext.libvlcVersion"
//    signedReleaseApi "org.videolan.android:medialibrary-all:$rootProject.ext.mediaLibVersion"

    kapt "androidx.room:room-compiler:$rootProject.ext.androidxRoomVersion"
    kapt "org.xerial:sqlite-jdbc:$rootProject.ext.sqliteVersion"
    api "androidx.activity:activity-ktx:$rootProject.ext.androidxActivityVersion"
    api "androidx.annotation:annotation:$rootProject.ext.androidxAnnotationVersion"
    api "androidx.constraintlayout:constraintlayout:$rootProject.ext.androidxConstraintLayoutVersion"
    api "androidx.fragment:fragment-ktx:$rootProject.ext.androidxFragmentVersion"
    api "androidx.leanback:leanback-preference:$rootProject.ext.androidxLeanbackVersion"
    api "androidx.leanback:leanback:$rootProject.ext.androidxLeanbackVersion"
    api "androidx.lifecycle:lifecycle-common-java8:$rootProject.ext.androidxLifecycleVersion"
    api "androidx.lifecycle:lifecycle-livedata-ktx:$rootProject.ext.androidxLifecycleVersion"
    api "androidx.lifecycle:lifecycle-process:$rootProject.ext.androidxLifecycleVersion"
    api "androidx.lifecycle:lifecycle-runtime-ktx:$rootProject.ext.androidxLifecycleVersion"
    api "androidx.lifecycle:lifecycle-service:$rootProject.ext.androidxLifecycleVersion"
    api "androidx.lifecycle:lifecycle-viewmodel-ktx:$rootProject.ext.androidxLifecycleVersion"
    api "androidx.media:media:$rootProject.ext.androidxMediaVersion"
    api "androidx.multidex:multidex:$rootProject.ext.androidxMultidexVersion"
    api "androidx.paging:paging-runtime-ktx:$rootProject.ext.androidxPagingVersion"
    api "androidx.recyclerview:recyclerview:$rootProject.ext.androidxRecyclerviewVersion"
    api "androidx.room:room-runtime:$rootProject.ext.androidxRoomVersion"
    api "androidx.tvprovider:tvprovider:$rootProject.ext.androidxLeanbackVersion"
    api "androidx.viewpager2:viewpager2:$rootProject.ext.androidxViewPager2Version"
    api "androidx.window:window:$rootProject.ext.androidxWindowVersion"
    api "com.google.android.material:material:$rootProject.ext.androidxMaterialVersion"
    api "org.jetbrains.kotlin:kotlin-reflect:$rootProject.ext.kotlin_version"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-android:$rootProject.ext.kotlinx_version"
    api "org.jetbrains.kotlinx:kotlinx-coroutines-core:$rootProject.ext.kotlinx_version"
    implementation "androidx.palette:palette-ktx:$rootProject.ext.androidxPalleteVersion"
    implementation "com.google.zxing:core:$rootProject.ext.zxingVersion"
    implementation "com.jaredrummler:colorpicker:$rootProject.ext.colorpickerVersion"
    implementation "nl.dionsegijn:konfetti:$rootProject.ext.konfettiVersion"
    testImplementation "androidx.arch.core:core-testing:$rootProject.ext.androidxArchVersion"
    testImplementation "androidx.test:core:$rootProject.ext.testCoreVersion"
    testImplementation "com.jraska.livedata:testing-ktx:$rootProject.ext.livedataTestVersion"
    testImplementation "io.mockk:mockk:$rootProject.ext.mockkVersion"
    testImplementation "junit:junit:$rootProject.ext.junitVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$rootProject.ext.kotlinx_version"
    testImplementation "org.mockito:mockito-core:$rootProject.ext.mockitoVersion"
    testImplementation "org.powermock:powermock-api-mockito2:$rootProject.ext.powerMockVersion"
    testImplementation "org.powermock:powermock-module-junit4:$rootProject.ext.powerMockVersion"
    testImplementation "org.robolectric:robolectric:$rootProject.ext.robolectricVersion"
    androidTestImplementation "androidx.arch.core:core-testing:$rootProject.ext.androidxArchVersion"
    androidTestImplementation "androidx.room:room-testing:$rootProject.ext.androidxRoomVersion"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$rootProject.espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$rootProject.espressoVersion"
    androidTestImplementation "androidx.test.ext:junit:$rootProject.ext.junitExtVersion"
    androidTestImplementation "androidx.test:rules:$rootProject.ext.testCoreVersion"
    androidTestImplementation "com.jraska:falcon:$rootProject.ext.falconVersion"
    androidTestImplementation "tools.fastlane:screengrab:$rootProject.ext.screengrabVersion"
    androidTestUtil "androidx.test:orchestrator:$rootProject.ext.orchestratorVersion"
}

static def buildTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

static def hostName() {
    return "${System.getProperty("user.name")}@${InetAddress.localHost.hostName}"
}

def revision() {
    def code = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = code
    }
    return code.toString()
}

/**
 * Generate a changelog string from the NEWS file
 * @return a string containing the latest changelog entry
 */
def changelog() {
    def newsFile = new File("NEWS")
    def line, output = "", started = false
    if (newsFile.exists()) {
        newsFile.withReader { reader ->
            while ((line = reader.readLine()) != null) {
                if (started && !line?.trim()) break
                if (started) {
                    if (output != "") output += "\\n"
                    output += line.trim()
                }
                if (line.contains("---")) started = true
            }
        }
    }
    return output
}

def isBeta() {
    def versionNameLower = versionName.toLowerCase()
    return (versionNameLower.contains("beta") || versionNameLower.contains("rc") || versionNameLower.contains("alpha") || versionNameLower.contains("dev")).toString()
}

kapt {
    javacOptions {
        // Increase the max count of errors from annotation processors.
        // Default is 100.
        option("-Xmaxerrs", 500)
    }
}
