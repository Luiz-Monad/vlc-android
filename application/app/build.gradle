apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

android {
    namespace 'org.videolan.mobile.app'
    buildToolsVersion rootProject.ext.buildToolsVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11.toString()
    }

    buildFeatures {
        buildConfig = true
    }

    dataBinding {
        enabled = true
    }

    packagingOptions {
        jniLibs {
            pickFirsts += ['lib/armeabi-v7a/libc++_shared.so',
                           'lib/armeabi/libc++_shared.so',
                           'lib/arm64-v8a/libc++_shared.so',
                           'lib/x86/libc++_shared.so',
                           'lib/x86_64/libc++_shared.so']
        }
        resources {
            excludes += ['META-INF/main.kotlin_module',
                         'META-INF/donations_debug.kotlin_module',
                         'META-INF/mediadb_debug.kotlin_module',
                         'META-INF/resources_debug.kotlin_module',
                         'META-INF/television_debug.kotlin_module']
        }
    }

    defaultConfig {
        compileSdkVersion rootProject.ext.compileSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        minSdkVersion rootProject.ext.minSdkVersion

        applicationId rootProject.ext.appId
        versionCode rootProject.ext.versionCode
        versionName rootProject.ext.versionName

        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner "org.videolan.vlc.MultidexTestRunner"
        // The following argument makes the Android Test Orchestrator run its
        // "pm clear" command after each test invocation. This command ensures
        // that the app's state is completely cleared between tests.
        testInstrumentationRunnerArguments clearPackageData: 'true'
        consumerProguardFiles 'consumer-rules.pro'
        multiDexEnabled true
    }

    signingConfigs {
        release {
            /*
            To set this properties, create file gradle.properties with these 3 props.
            e.g.
            keyStoreFile=/home/<username>/.android/debug.keystore
            storealias=androiddebugkey
            storepwd=android
             */
            if (project.hasProperty('keyStoreFile')) {
                storeFile file(project.findProperty('keyStoreFile'))
                keyAlias project.findProperty('storealias')
                if (System.getenv('PASSWORD_KEYSTORE') != null && !System.getenv('PASSWORD_KEYSTORE').isEmpty()) {
                    storePassword = System.getenv('PASSWORD_KEYSTORE')
                    keyPassword = System.getenv('PASSWORD_KEYSTORE')
                } else {
                    storePassword project.findProperty('storepwd')
                    keyPassword project.findProperty('storepwd')
                }
            }
        }
    }
    androidComponents {
        beforeVariants(selector().withBuildType("vlcBundle")) { variantBuilder ->
            variantBuilder.minSdk = rootProject.ext.minBundleSdkVersion
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles 'proguard-rules.pro'
            kotlinOptions.freeCompilerArgs = ['-Xno-param-assertions']
            defaultConfig.minSdkVersion rootProject.ext.minSdkVersion
        }
        signedRelease {
            initWith release
            signingConfig = signingConfigs.release
            matchingFallbacks = ['release']
        }
        debug {
            applicationIdSuffix ".debug"
            jniDebuggable true
        }
        dev {
            initWith debug
            matchingFallbacks = ['debug']
        }
        noTv {
            initWith release
            matchingFallbacks = ['release']
            buildConfigField "boolean", "NO_TV", "true"
        }
        vlcBundle {
            initWith release
            matchingFallbacks = ['release']
        }
    }

    sourceSets.release {
        manifest.srcFile 'flavors/release/AndroidManifest.xml'
    }
    sourceSets.signedRelease {
        manifest.srcFile 'flavors/release/AndroidManifest.xml'
    }

    flavorDimensions "abi"
    splits {
        abi {
            def isReleaseBuild = false
            gradle.startParameter.taskNames.find {
                // Enable split for release builds in different build flavors
                // (assemblePaidRelease, assembleFreeRelease, etc.).
                if (it.toLowerCase() ==~ /assemble.*Release/.toLowerCase() || it.toLowerCase() ==~ /assembleNoTv/.toLowerCase()) {
                    isReleaseBuild = true
                    return true // break
                }
                return false // continue
            }
            enable isReleaseBuild
            reset()
            include "arm64-v8a"
//            include "x86", "x86_64", "armeabi-v7a", "arm64-v8a"
//            universalApk !isReleaseBuild
        }
    }

    lint {
        abortOnError false
        disable 'MissingTranslation', 'ExtraTranslation'
    }
    // make per-variant version code
    applicationVariants.all { variant ->
        //Custom APK name and versionCode
        variant.outputs.each { output ->
            def outputAbi = output.getFilter(com.android.build.OutputFile.ABI)
            def abiName = System.getenv('GRADLE_ABI')?.toLowerCase() ?: "all"
            if (outputAbi != null) abiName = outputAbi

            def versionCode = rootProject.ext.abiCodes.get(abiName, 0)
            if (variant.buildType.name == "vlcBundle") {
                versionCode = 9
            }
            output.versionCodeOverride = defaultConfig.versionCode + versionCode

            def outputName = rootProject.ext.appId.replace(".", "_")
            outputName += "-android-" + variant.versionName.replace(" ", "-")
            if (variant.buildType.name == "debug") outputName += "-debug"
            if (variant.buildType.name == "noTv") outputName += "-no-tv"
            outputName += "-" + abiName.replace("-", "").replace("_", "")
            output.outputFileName = outputName + ".apk"
        }
    }

}

dependencies {
    implementation project(':application:vlc-android')
    implementation project(':application:television')
    testImplementation project(':application:television')

    testImplementation "androidx.arch.core:core-testing:$rootProject.ext.archVersion"
    testImplementation "androidx.test:core:$rootProject.ext.testCore"
    testImplementation "com.jraska.livedata:testing-ktx:$rootProject.ext.livedataTest"
    testImplementation "io.mockk:mockk:$rootProject.ext.mockk"
    testImplementation "junit:junit:$rootProject.ext.junitVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$rootProject.ext.kotlinx_version"
    testImplementation "org.mockito:mockito-core:$rootProject.ext.mockito"
    testImplementation "org.powermock:powermock-api-mockito2:$rootProject.ext.powerMock"
    testImplementation "org.powermock:powermock-module-junit4:$rootProject.ext.powerMock"
    testImplementation "org.robolectric:robolectric:$rootProject.ext.robolectric"
    androidTestImplementation "androidx.arch.core:core-testing:$rootProject.ext.archVersion"
    androidTestImplementation "androidx.room:room-testing:$rootProject.ext.roomVersion"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$rootProject.espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.espressoVersion"
    androidTestImplementation "androidx.test.espresso:espresso-intents:$rootProject.espressoVersion"
    androidTestImplementation "androidx.test.ext:junit:$rootProject.ext.junitExtVersion"
    androidTestImplementation "androidx.test.uiautomator:uiautomator:2.2.0"
    androidTestImplementation "androidx.test:rules:$rootProject.ext.testCore"
    androidTestImplementation "com.android.support:multidex:1.0.3"
    androidTestImplementation 'com.jraska:falcon:2.2.0'
    androidTestImplementation 'tools.fastlane:screengrab:2.1.0'
    androidTestUtil "androidx.test:orchestrator:$rootProject.ext.orchestrator"
}
