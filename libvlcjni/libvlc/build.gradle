apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'

def abi = System.getenv('GRADLE_ABI')?.toLowerCase() ?: "all"
ext {
    library_version = "$rootProject.ext.libvlcVersion"
}

android {
    namespace 'org.videolan.libvlc'
    buildToolsVersion rootProject.ext.buildToolsVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11.toString()
    }

    buildFeatures {
        buildConfig = true
    }

    defaultConfig {
        compileSdkVersion rootProject.ext.compileSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        minSdkVersion rootProject.ext.minSdkVersion

        resValue "string", "build_libvlc_revision", "${rootProject.ext.libvlcRevisionVersion}"
        resValue "string", "build_vlc_revision", "${rootProject.ext.libvlcRevisionVersion}"
        tasks.configureEach { task ->
            if (task.name.startsWith('merge')) {
                task.dependsOn hrtfsCopy
                task.dependsOn luaPlaylistCopy
                task.dependsOn luaMetaCopy
                task.dependsOn luaModuleCopy
            }
        }
    }

    sourceSets {
        main {
            jniLibs.srcDirs = [ 'jni/libs' ]
            manifest.srcFile 'AndroidManifest.xml'
            java.srcDirs = ['src']
            resources.srcDirs = ['src']
            aidl.srcDirs = ['src']
            renderscript.srcDirs = ['src']
            res.srcDirs = ['res']
            assets.srcDirs = ['assets' ]
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles 'proguard-rules.pro'
        }
        debug {
            jniDebuggable true
        }
        dev {
            initWith debug
            matchingFallbacks = ['debug']
        }
    }

    // Make per-variant version code
    libraryVariants.configureEach { variant ->
        //Custom APK name
        variant.outputs.each { output ->
            if (output.outputFileName != null && output.outputFileName.endsWith('.aar')) {
                output.outputFileName = "libvlc-${abi}-${library_version}.aar"
            }
        }
    }

    tasks.register('hrtfsCopy', Copy) {
        project.logger.lifecycle('hrtfsCopy')
        from '../../vlc/share/hrtfs'
        into 'assets/hrtfs'
    }

    tasks.register('luaPlaylistCopy', Copy) {
        from '../../vlc/share/lua/playlist'
        into 'assets/lua/playlist'
        exclude '**/*.txt'
    }

    tasks.register('luaModuleCopy', Copy) {
        from '../../vlc/share/lua/modules'
        into 'assets/lua/modules'
        exclude '**/*.txt'
    }

    tasks.register('luaMetaCopy', Copy) {
        from '../../vlc/share/lua/meta'
        into 'assets/lua/meta'
        exclude '**/*.txt'
    }
}

clean {
    delete 'build', 'jni/obj'
}

dependencies {
    api "androidx.annotation:annotation:$rootProject.ext.androidxAnnotationVersion"
    api "androidx.legacy:legacy-support-v4:$rootProject.ext.androidxLegacyVersion"
}
